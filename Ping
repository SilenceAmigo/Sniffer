using System;
using System.Net.NetworkInformation;
using System.Threading.Tasks;

class Program
{
    private static int count;
    static async Task Main(string[] args)
    {
        string localIP = GetLocalIPAddress();
        if (localIP == null)
        {
            Console.WriteLine("Keine lokale IP-Adresse gefunden.");
            return;
        }

        string subnet = GetSubnet(localIP);
        Console.WriteLine($"Subnetz: {subnet}0/24");

        await PingSweepAsync(subnet);
    }

    // Methode zum asynchronen Ping-Sweep
    static async Task PingSweepAsync(string subnet)
    {
        Console.WriteLine("Starte Ping-Sweep...");

        // Parallel.ForEach wird verwendet, um die IPs schnell zu scannen
        var tasks = new Task[254];
        for (int i = 1; i <= 254; i++)
        {
            string ip = $"{subnet}{i}";
            tasks[i - 1] = PingDeviceAsync(ip);
        }

        await Task.WhenAll(tasks);
    }

    // Asynchrone Methode zum Pingen eines Geräts
    static async Task PingDeviceAsync(string ipAddress)
    {
        using (Ping ping = new Ping())
        {
            try
            {
                PingReply reply = await ping.SendPingAsync(ipAddress, 1000); // 100ms Timeout
                if (reply.Status == IPStatus.Success)
                {
                    Console.WriteLine($" {count++} Gerät gefunden: {ipAddress}");  
                     
                }
            }
            catch
            {
            }
        }
    }

    // Methode zur Ermittlung der lokalen IP-Adresse
    static string GetLocalIPAddress()
    {
        foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
        {
            if (nic.NetworkInterfaceType != NetworkInterfaceType.Loopback && nic.OperationalStatus == OperationalStatus.Up)
            {
                foreach (UnicastIPAddressInformation ip in nic.GetIPProperties().UnicastAddresses)
                {
                    if (ip.Address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        return ip.Address.ToString();
                    }
                }
            }
        }
        return null;
    }

    // Methode zur Ermittlung des Subnetzes
    static string GetSubnet(string ipAddress)
    {
        var segments = ipAddress.Split('.');
        return $"{segments[0]}.{segments[1]}.{segments[2]}.";
    }
}
